<?xml version="1.0"?>
<AddIn name        = "Hosted SharpDevelop"
       author      = "Daniel Grunwald"
       copyright   = "prj:///doc/copyright.txt"
       url         = "http://www.icsharpcode.net"
       description = "SharpDevelop main module"
       addInManagerHidden = "true">
	
	<Manifest>
		<Identity name = "HostedSharpDevelop" version = "@SharpDevelopCoreVersion"/>
	</Manifest>
	
	<Runtime>
		<Import assembly=":ICSharpCode.SharpDevelop">
			<!-- SharpDevelop defines more conditions and doozers, we just -->
			<!-- import those we need here. -->
			<ConditionEvaluator name="WindowActive" class="ICSharpCode.SharpDevelop.WindowActiveConditionEvaluator"/>
			<ConditionEvaluator name="ActiveWindowState" class="ICSharpCode.SharpDevelop.ActiveWindowStateConditionEvaluator"/>
			<ConditionEvaluator name="OpenWindowState" class="ICSharpCode.SharpDevelop.OpenWindowStateConditionEvaluator"/>
			
			<Doozer name="DialogPanel" class="ICSharpCode.SharpDevelop.DialogPanelDoozer"/>
			<Doozer name="DisplayBinding" class="ICSharpCode.SharpDevelop.DisplayBindingDoozer"/>
		</Import>
	</Runtime>
	
	<!-- This is the minimum AddIn required to use SharpDevelop -->
	
	<!-- Every Application should provide this extension point, used by many addins (e.g. AddInManager) -->
	<Path name = "/Workspace/Tools"></Path>
	
	<!-- REQUIRED to load files -->
	<Path name = "/SharpDevelop/Workbench/Combine/FileFilter">
		<FileFilter id         = "AllFiles"
		            name       = "${res:SharpDevelop.FileFilter.AllFiles}"
		            extensions = "*.*"/>
	</Path>
	
	<!-- REQUIRED for the open and save file dialogs -->
	<Path name = "/SharpDevelop/Workbench/FileFilter">
		<FileFilter id         = "AllFiles"
		            name       = "${res:SharpDevelop.FileFilter.AllFiles}"
		            extensions = "*.*"/>
	</Path>
	
	<!-- REQUIRED to open views -->
	<Path name = "/SharpDevelop/Workbench/DisplayBindings">
		<DisplayBinding id = "Text"
		                supportedformats = "Text Files,Source Files"
		                class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.Editor.TextEditorDisplayBinding" />
	</Path>
	
	<!-- REQUIRED to open views -->
	<Path name = "/SharpDevelop/Workbench/OpenFileTab/ContextMenu">
		<MenuItem id = "Close"
		          label = "${res:OpenFileTabEventHandler.ContextMenu.Close}"
		          icon  = "Icons.16x16.CloseFileIcon"
		          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.CloseFileTab"/>
		<MenuItem id    = "CloseAll"
		          icon  = "Icons.16x16.CloseAllDocuments"
		          label = "${res:XML.MainMenu.FileMenu.CloseAll}"
		          class = "ICSharpCode.SharpDevelop.Commands.CloseAllWindows" />
		<MenuItem id    = "CloseAllButThis"
		          label = "${res:OpenFileTabEventHandler.ContextMenu.CloseAllButThis}"
		          class = "ICSharpCode.SharpDevelop.Commands.TabStrip.CloseAllButThisFileTab" />
	</Path>
	
	<!-- REQUIRED if you use the default text editor (TextEditorDisplayBinding) -->
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/ContextMenu">
		<Include id = "Cut" item = "/SharpDevelop/Workbench/MainMenu/Edit/Cut"/>
		<Include id = "Copy" item = "/SharpDevelop/Workbench/MainMenu/Edit/Copy"/>
		<Include id = "Paste" item = "/SharpDevelop/Workbench/MainMenu/Edit/Paste"/>
		<Include id = "Delete" item = "/SharpDevelop/Workbench/MainMenu/Edit/Delete"/>
		<MenuItem id = "Separator1" type = "Separator" />
		<MenuItem id = "Options"
		          label = "${res:XML.TextAreaContextMenu.BufferOptions}"
		          icon = "Icons.16x16.PropertiesIcon"
		          class ="ICSharpCode.SharpDevelop.DefaultEditor.Commands.ShowBufferOptions"/>
	</Path>
	
	<!-- required for BufferOptions command in text editor context menu -->
	<Path name = "/SharpDevelop/ViewContent/DefaultTextEditor/OptionsDialog">
		<DialogPanel id = "General"
		             label = "${res:Dialog.Options.IDEOptions.TextEditor.General.PanelName}"
		             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.GeneralTextEditorPanel"/>
		<DialogPanel id = "Markers"
		             label = "${res:Dialog.Options.IDEOptions.TextEditor.Markers.PanelName}"
		             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.MarkersTextEditorPanel"/>
		<DialogPanel id = "Behavior"
		             label = "${res:Dialog.Options.IDEOptions.TextEditor.Behaviour.PanelName}"
		             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.BehaviorTextEditorPanel"/>
	</Path>
	
	<!-- required for main menu options command -->
	<Path name = "/SharpDevelop/Dialogs/OptionsDialog">
		<DialogPanel id    = "ToolsOptions"
		             label = "${res:Dialog.Options.IDEOptions.ToolsOptionsText}">
			<DialogPanel id    = "ExternalTools"
			             label = "${res:Dialog.Options.ExternalToolsText}"
			             class = "ICSharpCode.SharpDevelop.Gui.OptionPanels.ExternalToolPane"/>
		</DialogPanel>
		
		<DialogPanel id    = "TextEditorOptions"
		             label = "${res:Dialog.Options.IDEOptions.TextEditorOptionsText}">
			<DialogPanel id = "General"
			             label = "${res:Dialog.Options.IDEOptions.TextEditor.General.PanelName}"
			             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.GeneralTextEditorPanel"/>
			<DialogPanel id = "Markers"
			             label = "${res:Dialog.Options.IDEOptions.TextEditor.Markers.PanelName}"
			             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.MarkersTextEditorPanel"/>
			<DialogPanel id = "Behavior"
			             label = "${res:Dialog.Options.IDEOptions.TextEditor.Behaviour.PanelName}"
			             class = "ICSharpCode.SharpDevelop.DefaultEditor.Gui.OptionPanels.BehaviorTextEditorPanel"/>
		</DialogPanel>
	</Path>
	
	<!-- Main menu -->
	<Path name = "/SharpDevelop/Workbench/MainMenu">
		<MenuItem id = "File" label    = "${res:XML.MainMenu.FileMenu}" type="Menu">
			<MenuItem id           = "File"
			          label        = "${res:XML.MainMenu.FileMenu.New} ${res:XML.MainMenu.FileMenu.New.File}"
			          icon         = "Icons.16x16.NewDocumentIcon"
			          shortcut     = "Control|N"
			          class        = "ICSharpCode.SharpDevelop.Commands.CreateNewFile"/>
			
			<MenuItem id          = "File"
			          label       = "${res:XML.MainMenu.FileMenu.Open} ${res:XML.MainMenu.FileMenu.Open.File}"
			          icon        = "Icons.16x16.OpenFileIcon"
			          shortcut    = "Control|O"
			          class       = "ICSharpCode.SharpDevelop.Commands.OpenFile"/>
			
			<Condition name = "WindowActive" activewindow="*" action="Disable">
				<MenuItem id = "CloseFile"
				          label = "${res:XML.MainMenu.FileMenu.Close} ${res:XML.MainMenu.FileMenu.Close.File}"
				          icon  = "Icons.16x16.CloseFileIcon"
				          shortcut = "Control|F4"
				          class ="ICSharpCode.SharpDevelop.Commands.CloseFile"/>
			</Condition>
			
			<MenuItem id = "SaveSeparator" type = "Separator"  />
			
			<Condition name = "ActiveWindowState" windowstate="Dirty, Untitled" nowindowstate="ViewOnly" action="Disable">
				<MenuItem id = "Save"
				          label = "${res:XML.MainMenu.FileMenu.Save}"
				          icon = "Icons.16x16.SaveIcon"
				          shortcut = "Control|S"
				          class = "ICSharpCode.SharpDevelop.Commands.SaveFile"/>
			</Condition>
			
			<Condition name = "ActiveWindowState" windowstate="None" nowindowstate="ViewOnly" action="Disable">
				<MenuItem id = "SaveAs"
				          label = "${res:XML.MainMenu.FileMenu.SaveAs}"
				          class = "ICSharpCode.SharpDevelop.Commands.SaveFileAs"/>
			</Condition>
			
			<Condition name = "OpenWindowState" openwindowstate="Dirty" action="Disable">
				<MenuItem id = "SaveAll"
				          label = "${res:XML.MainMenu.FileMenu.SaveAll}"
				          icon = "Icons.16x16.SaveAllIcon"
				          shortcut = "Control|Shift|S"
				          class = "ICSharpCode.SharpDevelop.Commands.SaveAllFiles"/>
			</Condition>
			
			<MenuItem id = "ExitSeparator" type = "Separator"  />
			<MenuItem id = "Exit"
			          label = "${res:XML.MainMenu.FileMenu.Exit}"
			          icon = "Icons.16x16.CancelIcon"
			          class = "ICSharpCode.SharpDevelop.Commands.ExitWorkbenchCommand" />
		</MenuItem> <!-- END File menu -->
		
		<MenuItem id = "Edit" label = "${res:XML.MainMenu.EditMenu}" type="Menu">
			<MenuItem id = "Undo"
			          label = "${res:XML.MainMenu.EditMenu.Undo}"
			          icon = "Icons.16x16.UndoIcon"
			          type = "Item"
			          shortcut = "Control|Z"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Undo"/>
			<MenuItem id = "Redo"
			          label = "${res:XML.MainMenu.EditMenu.Redo}"
			          icon = "Icons.16x16.RedoIcon"
			          type = "Item"
			          shortcut = "Control|Y"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Redo"/>
			<MenuItem id = "Separator1" type = "Separator"  />
			<MenuItem id = "Cut"
			          label = "${res:XML.MainMenu.EditMenu.Cut}"
			          icon = "Icons.16x16.CutIcon"
			          type = "Item"
			          shortcut = "Control|X"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Cut"/>
			<MenuItem id = "Copy"
			          label = "${res:XML.MainMenu.EditMenu.Copy}"
			          icon = "Icons.16x16.CopyIcon"
			          type = "Item"
			          shortcut = "Control|C"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Copy"/>
			<MenuItem id = "Paste"
			          label = "${res:XML.MainMenu.EditMenu.Paste}"
			          icon = "Icons.16x16.PasteIcon"
			          type = "Item"
			          shortcut = "Control|V"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Paste"/>
			<MenuItem id = "Delete"
			          label = "${res:XML.MainMenu.EditMenu.Delete}"
			          icon = "Icons.16x16.DeleteIcon"
			          type = "Item"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.Delete"/>
			<MenuItem id = "SelectAll"
			          label = "${res:XML.MainMenu.EditMenu.SelectAll}"
			          type = "Item"
			          shortcut = "Control|A"
			          loadclasslazy = "false"
			          class = "ICSharpCode.SharpDevelop.Commands.SelectAll"/>
		</MenuItem> <!-- end EDIT menu -->
	
		<MenuItem id = "Tools" label = "${res:XML.MainMenu.ToolMenu}" type="Menu">
			<!-- configurable tool list (Options Dialog > External Tools) -->
			<MenuItem id = "ToolBuilder" type="Builder" class = "ICSharpCode.SharpDevelop.Commands.ToolMenuBuilder" />
			
			<MenuItem id = "Separator1" type = "Separator" />
			
			<!-- AddIns can add tool commands here-->
			<Include id = "ToolList" path = "/Workspace/Tools" />
			
			<MenuItem id = "LastSeparator" type = "Separator" />
			
			<MenuItem id = "Options"
			          label = "${res:XML.MainMenu.ToolMenu.Options}"
			          icon = "Icons.16x16.Options"
			          class = "ICSharpCode.SharpDevelop.Commands.OptionsCommand"/>
		</MenuItem>
	</Path>

	<Path name="/SharpDevelop/Workbench/ToolBar">
		<ToolbarItem id      = "New"
		             icon    = "Icons.16x16.NewDocumentIcon"
		             tooltip = "${res:XML.MainMenu.FileMenu.New.File.Description}"
		             class   = "ICSharpCode.SharpDevelop.Commands.CreateNewFile"/>
		<ToolbarItem id      = "Open"
		             icon    = "Icons.16x16.OpenFileIcon"
		             tooltip = "${res:XML.MainMenu.FileMenu.Open.File.Description}"
		             class   = "ICSharpCode.SharpDevelop.Commands.OpenFile"/>		
	</Path>
</AddIn>
